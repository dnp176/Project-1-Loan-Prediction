# -*- coding: utf-8 -*-
"""Loan_Prediction_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B9_Ftnpb1Ag38YaCN5HGrLyeQP_pF6Ns

#**Summary To Explain Project (Keypoints)** 

*   Import Required Library
*   Display Top 5 , Last 5 Data and Display Dataset Information
*   Check Shape and Null Value From Dataset
*   Handle Missing & Categorical Column Data
*   Store Target Column & Other Feature Column
*   Feature Scaling
*   Split Dataset For Testign
*   Train & Check Different ML Model
*   Save Model
*   GUI (In Google Colab GUI is Not Working That's Why Code is Commented)

**Note :** *Here is the small dataset so I don't use any other library for cleaning or pre-processing dataset. Also I don't use One-Hot Encoding.*
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import f1_score

from sklearn.tree import DecisionTreeClassifier

from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
import joblib
from tkinter import *
import pandas as pd

df = pd.read_csv("/content/drive/MyDrive/MyDataSet/Load_Prediction/train.csv")

"""# 1. Display Top 5 Rows && Last 5 Rows of The Dataset

"""

df.head(10)

df.tail()

"""# 2. Find Shape of Our Dataset (Number of Rows And Number of Columns)"""

df.shape

"""# 3. Get Information About Data Set

"""

df.info()

"""# 4. Check Null Values"""

df.isnull().sum()

"""# 5. Handle Missing Value"""

df = df.drop('Loan_ID',axis=1)

columns = ['Gender','Dependents','LoanAmount','Loan_Amount_Term']

df = df.dropna(subset=columns)

df.isnull().sum()

df['Self_Employed'].mode()[0]

df['Self_Employed'] =df['Self_Employed'].fillna(df['Self_Employed'].mode()[0])

df['Credit_History'].mode()[0]

df['Credit_History'] =df['Credit_History'].fillna(df['Credit_History'].mode()[0])

"""# 6. Handling Categorical Columns

"""

df.head()

df['Dependents'] =df['Dependents'].replace(to_replace="3+",value='4')

df['Loan_Status'].unique()

df['Gender'] = df['Gender'].map({'Male':1,'Female':0}).astype('int')
df['Married'] = df['Married'].map({'Yes':1,'No':0}).astype('int')
df['Education'] = df['Education'].map({'Graduate':1,'Not Graduate':0}).astype('int')
df['Self_Employed'] = df['Self_Employed'].map({'Yes':1,'No':0}).astype('int')
df['Property_Area'] = df['Property_Area'].map({'Rural':0,'Semiurban':2,'Urban':1}).astype('int')
df['Loan_Status'] = df['Loan_Status'].map({'Y':1,'N':0}).astype('int')

df.head()

"""# 7. Store Target Value In X and Other Features in y"""

X = df.drop('Loan_Status',axis=1)

y = df['Loan_Status']

"""# 8. Feature Scaling"""

df.sample(5)

cols = ['ApplicantIncome','CoapplicantIncome','LoanAmount','Loan_Amount_Term']

st = StandardScaler()
X[cols]=st.fit_transform(X[cols])

X

"""# 9. Split Dataset For Testing && Checking

"""

x_train, x_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.25, random_state = 42)

print(x_train.shape)
print(x_valid.shape)
print(y_train.shape)
print(y_valid.shape)

"""# 10. Trained Different ML Model && Check

"""

model = RandomForestClassifier()
model.fit(x_train, y_train)

y_pred = model.predict(x_valid)

print("Training Accuracy :", model.score(x_train, y_train))
print("Validation Accuracy :", model.score(x_valid, y_valid))

# calculating the f1 score for the validation set
print("F1 score :", f1_score(y_valid, y_pred))

# confusion matrix
cm = confusion_matrix(y_valid, y_pred)
print(cm)

model = DecisionTreeClassifier()
model.fit(x_train, y_train)

y_pred = model.predict(x_valid)

print("Training Accuracy :", model.score(x_train, y_train))
print("Validation Accuracy :", model.score(x_valid, y_valid))

# calculating the f1 score for the validation set
print("f1 score :", f1_score(y_valid, y_pred))

# confusion matrix
cm = confusion_matrix(y_valid, y_pred)
print(cm)

model = SVC()
model.fit(x_train, y_train)

y_pred = model.predict(x_valid)

print("Training Accuracy :", model.score(x_train, y_train))
print("Validation Accuracy :", model.score(x_valid, y_valid))

# calculating the f1 score for the validation set
print("f1 score :", f1_score(y_valid, y_pred))

# confusion matrix
cm = confusion_matrix(y_valid, y_pred)
print(cm)

model = LogisticRegression()
model.fit(x_train, y_train)

y_pred = model.predict(x_valid)

print("Training Accuracy :", model.score(x_train, y_train))
print("Validation Accuracy :", model.score(x_valid, y_valid))

# calculating the f1 score for the validation set
print("f1 score :", f1_score(y_valid, y_pred))

# confusion matrix
cm = confusion_matrix(y_valid, y_pred)
print(cm)

"""# 11. Save The Model"""

X = df.drop('Loan_Status',axis=1)
y = df['Loan_Status']

rf = RandomForestClassifier(n_estimators=270,
 min_samples_split=5,
 min_samples_leaf=5,
 max_features='sqrt',
 max_depth=5)

rf.fit(X,y)

joblib.dump(rf,'loan_status_predict')

model = joblib.load('loan_status_predict')

df.head()

# df[0:1]
p1 = np.array(df.values[8,:])[0:11]
print(p1)

# import pandas as pd
# df = pd.DataFrame({
#     'Gender':1,
#     'Married':1,
#     'Dependents':2,
#     'Education':0,
#     'Self_Employed':0,
#     'ApplicantIncome':2889,
#     'CoapplicantIncome':0.0,
#     'LoanAmount':45,
#     'Loan_Amount_Term':180,
#     'Credit_History':0,
#     'Property_Area':1
# },index=[0])

result = model.predict([p1])

if result==1:
    print("Loan Approved")
else:
    print("Loan Not Approved")

"""# 12. GUI"""

# def show_entry():
    
#     p1 = float(e1.get())
#     p2 = float(e2.get())
#     p3 = float(e3.get())
#     p4 = float(e4.get())
#     p5 = float(e5.get())
#     p6 = float(e6.get())
#     p7 = float(e7.get())
#     p8 = float(e8.get())
#     p9 = float(e9.get())
#     p10 = float(e10.get())
#     p11 = float(e11.get())
    
#     model = joblib.load('loan_status_predict')
#     df = pd.DataFrame({
#     'Gender':p1,
#     'Married':p2,
#     'Dependents':p3,
#     'Education':p4,
#     'Self_Employed':p5,
#     'ApplicantIncome':p6,
#     'CoapplicantIncome':p7,
#     'LoanAmount':p8,
#     'Loan_Amount_Term':p9,
#     'Credit_History':p10,
#     'Property_Area':p11
# },index=[0])
#     result = model.predict(df)
    
#     if result == 1:
#         Label(master, text="Loan approved").grid(row=31)
#     else:
#         Label(master, text="Loan Not Approved").grid(row=31)
        
    
# master =Tk()
# master.title("Loan Status Prediction Using Machine Learning")
# label = Label(master,text = "Loan Status Prediction",bg = "black",
#                fg = "white").grid(row=0,columnspan=2)

# Label(master,text = "Gender [1:Male ,0:Female]").grid(row=1)
# Label(master,text = "Married [1:Yes,0:No]").grid(row=2)
# Label(master,text = "Dependents [1,2,3,4]").grid(row=3)
# Label(master,text = "Education").grid(row=4)
# Label(master,text = "Self_Employed").grid(row=5)
# Label(master,text = "ApplicantIncome").grid(row=6)
# Label(master,text = "CoapplicantIncome").grid(row=7)
# Label(master,text = "LoanAmount").grid(row=8)
# Label(master,text = "Loan_Amount_Term").grid(row=9)
# Label(master,text = "Credit_History").grid(row=10)
# Label(master,text = "Property_Area").grid(row=11)


# e1 = Entry(master)
# e2 = Entry(master)
# e3 = Entry(master)
# e4 = Entry(master)
# e5 = Entry(master)
# e6 = Entry(master)
# e7 = Entry(master)
# e8 = Entry(master)
# e9 = Entry(master)
# e10 = Entry(master)
# e11 = Entry(master)


# e1.grid(row=1,column=1)
# e2.grid(row=2,column=1)
# e3.grid(row=3,column=1)
# e4.grid(row=4,column=1)
# e5.grid(row=5,column=1)
# e6.grid(row=6,column=1)
# e7.grid(row=7,column=1)
# e8.grid(row=8,column=1)
# e9.grid(row=9,column=1)
# e10.grid(row=10,column=1)
# e11.grid(row=11,column=1)

# Button(master,text="Predict",command=show_entry).grid()

# mainloop()